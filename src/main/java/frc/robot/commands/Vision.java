// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import java.util.ArrayList;

import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.wpilibj.SPI;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.RobotContainer;
import frc.robot.commands.Drive;
import frc.robot.subsystems.DriveSub;
import frc.robot.commands.pixy2api.Pixy2;
import frc.robot.commands.pixy2api.Pixy2CCC;
import frc.robot.commands.pixy2api.Pixy2CCC.Block;
import frc.robot.commands.pixy2api.links.I2CLink;
import frc.robot.commands.pixy2api.links.SPILink;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.VisionSub;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */ 
public class Vision extends CommandBase {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private DriveSub m_driveSub = null;
        public Pixy2 pixy; 
        public Pixy2CCC pixycam;
        public String mode = null;
        NetworkTable table = NetworkTableInstance.getDefault().getTable("limelight");
        NetworkTableEntry tx = table.getEntry("tx");
        NetworkTableEntry ty = table.getEntry("ty");
        NetworkTableEntry ta = table.getEntry("ta");
        NetworkTableEntry tv = table.getEntry("tv");
        
        public RobotContainer m_robotContainer = RobotContainer.getInstance();
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    public Vision()
    {
        pixy = Pixy2.createInstance(new I2CLink());
        pixy.init();
    }

    public Vision(String mode){
        this.mode = mode;
    }

    public Vision(DriveSub driveSub)
    {
        m_driveSub = driveSub;
        addRequirements(m_driveSub);  
        pixy = Pixy2.createInstance(new I2CLink());
        pixy.init();
    }


    

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
    // here


    }

    public int getAngleAdjust()
    {
        return m_robotContainer.m_visionSub.angleAdjust;
    }

    public int getRangeAdjust()
    {
        return m_robotContainer.m_visionSub.rangeAdjust;
    }


    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {

        if(mode != null)
        {
            try{
                if(mode.equals("rangeUp"))
                {
                    m_robotContainer.m_visionSub.adjustRange(1);
                }
    
                if(mode.equals("rangeDown"))
                {
                    m_robotContainer.m_visionSub.adjustRange(-1);
    
                }
    
                if(mode.equals("angleUp"))
                {
                    m_robotContainer.m_visionSub.adjustAngle(1);
    
                }
    
                if(mode.equals("angleDown"))
                {
                    m_robotContainer.m_visionSub.adjustAngle(-1);
    
                }
    
                if(mode.equals("reset"))
                {
                    m_robotContainer.m_visionSub.resetAdjustments();
                }
                
            }catch(Exception e){
                
            }

        }
        
        if(m_driveSub != null){
            if(blocksInFrame()){
                
                    center();
                
            }else{
                m_driveSub.drive(0,0);
            }

        }
    }


    //center on target
    public void center()
    {
        
        double pwr = 0.1;
        int cameraCenter = 160;
        int tolerance = 20;
        int blockCenter = findBlockCenter();

        if(blocksInFrame()){
            if((blockCenter > cameraCenter - tolerance) && (blockCenter <  cameraCenter + tolerance)){
                //System.out.println(findBlockCenter());
    
                m_driveSub.drive(0,0);
            }else if((blockCenter > cameraCenter - tolerance)){
                m_driveSub.drive(-pwr, pwr);
            }else{
    
                m_driveSub.drive(pwr, -pwr);
            }
        }



    }

    public Boolean blocksInFrame()
    {

		int blockCount = pixy.getCCC().getBlocks(true, Pixy2CCC.CCC_SIG1, 1);
        if(blockCount > 0){

            return true;
        }else{
            return false;
        }



    }

    public int blockAngle()
    {
        pixy.getCCC().getBlocks(true, Pixy2CCC.CCC_SIG1, 1);
        ArrayList<Block> blocks = pixy.getCCC().getBlockCache();
        int angle = blocks.get(0).getAngle();

        return angle;
    }

    public void pixydatatotable() {
         int i  =  pixy.getCCC().getBlocks(true, Pixy2CCC.CCC_SIG1, 1);
        ArrayList<Block> blocks = pixy.getCCC().getBlockCache();
         if (blocks.size() > 0)
        {
           tv.setBoolean(true) ;
            tx.setNumber((blocks.get(0).getX()-160)/5.33) ;
            ty.setNumber((blocks.get(0).getY()-100)/5.0);

        }else{
           tv.setBoolean(false) ;
           tx.setNumber(0.0);
           ty.setNumber(0.0);
        }
      }    
    

    public int findBlockCenter()
    {
        int center = 160;

        pixy.getCCC().getBlocks(true, Pixy2CCC.CCC_SIG1, 1);
        ArrayList<Block> blocks = pixy.getCCC().getBlockCache();

        center = blocks.get(0).getX();



        

        return center;

        


    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }


    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
