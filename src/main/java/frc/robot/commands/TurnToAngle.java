// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.RobotContainer;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class TurnToAngle extends CommandBase {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    private double m_goalAngle;
    private double angle;
    private double tolerance;
    private double power = 0.1;
    public RobotContainer m_robotContainer = RobotContainer.getInstance();

 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    public TurnToAngle(double goalAngle, double tolerance, double power) {


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_goalAngle = goalAngle;
        this.tolerance = tolerance;
        this.power = power;



        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // m_subsystem = subsystem;
        // addRequirements(m_subsystem);    

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {

        m_robotContainer.m_driveSub.drive(0, 0);
        m_robotContainer.m_driveSub.resetGyro();
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {



        angle = m_robotContainer.m_driveSub.getGyroAngle();
        if(angle > (m_goalAngle - tolerance)){
            m_robotContainer.m_driveSub.drive(-power,power);
        }

        if(angle < (m_goalAngle + tolerance)){
            m_robotContainer.m_driveSub.drive(power,-power);

        }

    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {

        m_robotContainer.m_driveSub.drive(0, 0);
        m_robotContainer.m_driveSub.resetGyro();
        m_robotContainer.m_driveSub.resetEncoder();
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        if(Math.abs(angle) < tolerance){
            return true;
        }
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
